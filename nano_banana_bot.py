import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
import requests
import os
import base64
import asyncio
from io import BytesIO

# --- –ö–ª—é—á–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
SEGMIND_API_KEY = os.getenv('SEGMIND_API_KEY') # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π –∫–ª—é—á

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Segmind ---
SEGMIND_API_URL = "https://api.segmind.com/v1/nano-banana"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
PHOTO, HAIRSTYLE = range(2)

# --- –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏—á–µ—Å–∫–∞–º–∏ ---
HAIRSTYLES = {
    "–ö—É–¥—Ä–∏ üíá‚Äç‚ôÄÔ∏è": "long curly hair",
    "–ö–∞—Ä–µ üë©‚Äçü¶∞": "bob cut",
    "–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ üíá‚Äç‚ôÇÔ∏è": "short pixie cut",
    "–î–ª–∏–Ω–Ω—ã–µ –ø—Ä—è–º—ã–µ üë±‚Äç‚ôÄÔ∏è": "long straight hair",
    "–¶–≤–µ—Ç–Ω—ã–µ –≤–æ–ª–æ—Å—ã üåà": "rainbow colored hair"
}

# --- –§—É–Ω–∫—Ü–∏—è /start ---
async def start(update: Update, context) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ '–ø—Ä–∏–º–µ—Ä–∏—Ç—å' –Ω–æ–≤—É—é –ø—Ä–∏—á–µ—Å–∫—É —Å –ø–æ–º–æ—â—å—é AI.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏ (–∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)."
    )
    return PHOTO

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ ---
async def get_photo(update: Update, context) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –Ω–µ–≥–æ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    photo_file = await update.message.photo[-1].get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–∞–º—è—Ç—å
    photo_bytes = await photo_file.download_as_bytearray()
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
    photo_base64 = base64.b64encode(photo_bytes).decode('utf-8')
    context.user_data['photo_base64'] = photo_base64
    
    print(f"Photo downloaded and encoded to base64, size: {len(photo_bytes)} bytes")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∏—á–µ—Å–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(key, callback_data=value)]
        for key, value in HAIRSTYLES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–∏—á–µ—Å–∫—É:", reply_markup=reply_markup)
    return HAIRSTYLE

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Segmind ---
async def generate_image_with_segmind(update: Update, context) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—á–µ—Å–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    await query.answer()

    hairstyle_prompt = query.data
    photo_base64 = context.user_data.get('photo_base64')

    if not photo_base64:
        await query.edit_message_text(text="üòî –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return ConversationHandler.END

    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Segmind AI... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å API –∫–ª—é—á
        if not SEGMIND_API_KEY:
            await context.bot.send_message(
                chat_id=query.message.chat_id, 
                text="üòî –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á Segmind."
            )
            return ConversationHandler.END
        
        print(f"Using base64 encoded image, size: {len(photo_base64)} chars")
        print(f"Using prompt: A photorealistic portrait of a person with beautiful {hairstyle_prompt}, high detail, 8k")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Segmind
        headers = {
            'x-api-key': SEGMIND_API_KEY,
            'Content-Type': 'application/json'
        }
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        # –§–æ—Ä–º–∞—Ç 1: —Å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        data = {
            "prompt": f"Transform the hairstyle of this person to {hairstyle_prompt}, preserve the original face and identity completely, photorealistic, high quality, professional portrait, 8k resolution",
            "images": [photo_base64]  # –ü–æ–ø—Ä–æ–±—É–µ–º 'images' –≤–º–µ—Å—Ç–æ 'image'
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        max_retries = 3
        retry_delay = 5  # —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        data_formats = [
            {
                "prompt": f"Transform the hairstyle of this person to {hairstyle_prompt}, preserve the original face and identity completely, photorealistic, high quality, professional portrait, 8k resolution",
                "images": [photo_base64]
            },
            {
                "prompt": f"Transform the hairstyle of this person to {hairstyle_prompt}, preserve the original face and identity completely, photorealistic, high quality, professional portrait, 8k resolution",
                "image": photo_base64
            },
            {
                "prompt": f"Change hairstyle to {hairstyle_prompt}, keep same person, photorealistic",
                "image_base64": photo_base64
            }
        ]
        
        success = False
        for format_idx, data in enumerate(data_formats):
            print(f"Trying data format {format_idx + 1}: {list(data.keys())}")
            
            for attempt in range(max_retries):
                try:
                    response = requests.post(SEGMIND_API_URL, json=data, headers=headers, timeout=120)
                
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502, 503, 504), –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                if response.status_code in [502, 503, 504] and attempt < max_retries - 1:
                    print(f"Server error {response.status_code}, retrying in {retry_delay} seconds... (attempt {attempt + 1}/{max_retries})")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.edit_message_text(
                        text=f"‚è≥ –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É... ({attempt + 1}/{max_retries})"
                    )
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                if response.status_code == 406:
                    error_text = response.text if response.text else "Unknown error"
                    print(f"Segmind API 406 Error: {error_text}")
                    await context.bot.send_message(
                        chat_id=query.message.chat_id, 
                        text="üòî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ API –∫–ª—é—á–æ–º."
                    )
                    return ConversationHandler.END
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 502/503/504 –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                if response.status_code in [502, 503, 504]:
                    print(f"Server error {response.status_code} persists after all retries")
                    await context.bot.send_message(
                        chat_id=query.message.chat_id, 
                        text="üòî –°–µ—Ä–≤–µ—Ä Segmind –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                    )
                    return ConversationHandler.END
                    
                    response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx, 5xx)
                    success = True
                    break  # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    
                except requests.exceptions.Timeout:
                    if attempt < max_retries - 1:
                        print(f"Request timeout, retrying in {retry_delay} seconds... (attempt {attempt + 1}/{max_retries})")
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    else:
                        raise
            
            if success:
                break  # –£—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
            else:
                print(f"Data format {format_idx + 1} failed, trying next format...")
        
        if not success:
            await context.bot.send_message(
                chat_id=query.message.chat_id, 
                text="üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö."
            )
            return ConversationHandler.END        # –û—Ç–≤–µ—Ç –æ—Ç Segmind - —ç—Ç–æ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        generated_image_bytes = response.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=generated_image_bytes,
            caption="–ì–æ—Ç–æ–≤–æ! –ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–π –æ–±—Ä–∞–∑?"
        )
        await query.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å..."

    except requests.exceptions.RequestException as e:
        error_message = f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å API Segmind. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        print(f"Segmind API RequestException: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response status: {e.response.status_code}")
            print(f"Response text: {e.response.text}")
        await context.bot.send_message(chat_id=query.message.chat_id, text=error_message)
    except Exception as e:
        error_message = f"üòî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ç–æ."
        print(f"General exception: {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text=error_message)

    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã ---
async def cancel(update: Update, context) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.')
    context.user_data.clear()
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN:
        print("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
        return
    if not SEGMIND_API_KEY:
        print("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SEGMIND_API_KEY.")
        return
    
    print(f"Telegram Token: {'*' * 10}{TELEGRAM_TOKEN[-10:] if len(TELEGRAM_TOKEN) > 10 else 'SHORT'}")
    print(f"Segmind API Key: {'*' * 10}{SEGMIND_API_KEY[-10:] if len(SEGMIND_API_KEY) > 10 else 'SHORT'}")
    print(f"Segmind API URL: {SEGMIND_API_URL}")

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            HAIRSTYLE: [CallbackQueryHandler(generate_image_with_segmind)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()

if __name__ == '__main__':
    main()
