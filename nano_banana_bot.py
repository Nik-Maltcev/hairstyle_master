import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
import requests
import os
import base64
from io import BytesIO

# --- –ö–ª—é—á–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è OpenRouter ---
OPENROUTER_API_BASE = "https://openrouter.ai/api/v1"
# –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
GEMINI_FLASH_MODEL = "google/gemini-flash-1.5"
# –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
IMAGE_GEN_MODEL = "google/gemini-2.5-flash-image-preview"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
PHOTO, HAIRSTYLE = range(2)

# --- –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏—á–µ—Å–∫–∞–º–∏ ---
HAIRSTYLES = {
    "–ö—É–¥—Ä–∏ üíá‚Äç‚ôÄÔ∏è": "long curly hair",
    "–ö–∞—Ä–µ üë©‚Äçü¶∞": "bob cut",
    "–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ üíá‚Äç‚ôÇÔ∏è": "short pixie cut",
    "–î–ª–∏–Ω–Ω—ã–µ –ø—Ä—è–º—ã–µ üë±‚Äç‚ôÄÔ∏è": "long straight hair",
    "–¶–≤–µ—Ç–Ω—ã–µ –≤–æ–ª–æ—Å—ã üåà": "rainbow colored hair"
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64 ---
def encode_image_to_base64(image_bytes):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É Base64."""
    return base64.b64encode(image_bytes).decode('utf-8')

# --- –§—É–Ω–∫—Ü–∏—è /start ---
async def start(update: Update, context) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ '–ø—Ä–∏–º–µ—Ä–∏—Ç—å' –Ω–æ–≤—É—é –ø—Ä–∏—á–µ—Å–∫—É —Å –ø–æ–º–æ—â—å—é AI.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Å–µ–ª—Ñ–∏ (–∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)."
    )
    return PHOTO

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ ---
async def get_photo(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É."""
    photo_file = await update.message.photo[-1].get_file()

    photo_bytes_io = BytesIO()
    await photo_file.download_to_memory(photo_bytes_io)
    photo_bytes_io.seek(0)
    context.user_data['photo_bytes'] = photo_bytes_io.read()

    keyboard = [
        [InlineKeyboardButton(key, callback_data=value)]
        for key, value in HAIRSTYLES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–∏—á–µ—Å–∫—É:", reply_markup=reply_markup)
    return HAIRSTYLE

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter ---
async def generate_image_with_openrouter(update: Update, context) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—á–µ—Å–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    await query.answer()

    hairstyle_prompt = query.data
    photo_bytes = context.user_data.get('photo_bytes')

    if not photo_bytes:
        await query.edit_message_text(text="üòî –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return ConversationHandler.END

    await query.edit_message_text(text="‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è AI...")

    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }

        # --- –§–∞–∑–∞ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å Gemini Flash ---
        base64_image = encode_image_to_base64(photo_bytes)
        payload_gemini = {
            "model": GEMINI_FLASH_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"Create a short, detailed, photorealistic prompt for an image generation model. The goal is to reimagine the person in the photo with '{hairstyle_prompt}'. Describe their key facial features, gender, and approximate age based on the photo. The final image should be a high-quality, realistic portrait. Start the prompt with 'photorealistic portrait of a person...'. Do not mention the original photo."
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
                        }
                    ]
                }
            ]
        }

        response_gemini = requests.post(
            f"{OPENROUTER_API_BASE}/chat/completions",
            headers=headers,
            json=payload_gemini,
            timeout=30
        )
        response_gemini.raise_for_status()
        analysis_result = response_gemini.json()
        generated_prompt = analysis_result['choices'][0]['message']['content'].strip()

        await query.edit_message_text(text=f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.")

        # --- –§–∞–∑–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
        payload_image_gen = {
            "model": IMAGE_GEN_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": generated_prompt
                }
            ],
            "modalities": ["image", "text"] # <-- –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        }

        response_image_gen = requests.post(
            f"{OPENROUTER_API_BASE}/chat/completions", # <-- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
            headers=headers,
            json=payload_image_gen,
            timeout=120
        )
        response_image_gen.raise_for_status()

        image_result = response_image_gen.json()

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        message = image_result.get("choices")[0].get("message")
        if message and message.get("images"):
            # –ü–æ–ª—É—á–∞–µ–º Base64 URL –∏–∑ –æ—Ç–≤–µ—Ç–∞
            image_url = message["images"][0]["image_url"]["url"]

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=image_url, # Telegram API –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å base64 data URL
                caption="–ì–æ—Ç–æ–≤–æ! –ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–π –æ–±—Ä–∞–∑?"
            )
            await query.message.delete()
        else:
            raise ValueError("–í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    except requests.exceptions.RequestException as e:
        error_message = f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å API. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ OpenRouter –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n–î–µ—Ç–∞–ª–∏: {e}"
        print(error_message)
        await context.bot.send_message(chat_id=query.message.chat_id, text=error_message)
    except Exception as e:
        error_message = f"üòî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ç–æ.\n\n–î–µ—Ç–∞–ª–∏: {e}"
        print(error_message)
        await context.bot.send_message(chat_id=query.message.chat_id, text=error_message)

    return ConversationHandler.END


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã ---
async def cancel(update: Update, context) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.')
    context.user_data.clear()
    return ConversationHandler.END


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
        print("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ OPENROUTER_API_KEY.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            HAIRSTYLE: [CallbackQueryHandler(generate_image_with_openrouter)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        conversation_timeout=600
    )

    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()


if __name__ == '__main__':
    main()
